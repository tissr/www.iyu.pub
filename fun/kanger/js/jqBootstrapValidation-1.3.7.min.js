!function (a) {
    function e(a) {
        return new RegExp("^" + a + "$")
    }

    function t(a, e) {
        for (var t = Array.prototype.slice.call(arguments, 2), i = a.split("."), n = i.pop(), r = 0; r < i.length; r++)e = e[i[r]];
        return e[n].apply(e, t)
    }

    var i = [], n = {
        options: {
            prependExistingHelpBlock: !1,
            sniffHtml: !0,
            preventSubmit: !0,
            submitError: !1,
            submitSuccess: !1,
            semanticallyStrict: !1,
            bindEvents: [],
            autoAdd: {helpBlocks: !0},
            filter: function () {
                return !0
            }
        },
        methods: {
            init: function (e) {
                var t = a.extend(!0, {}, n);
                t.options = a.extend(!0, t.options, e);
                var s = this, d = a.unique(s.map(function () {
                    return a(this).parents("form")[0]
                }).toArray());
                return a(d).bind("submit", function (e) {
                    var i = a(this), n = 0, r = i.find("input,textarea,select").not("[type=submit],[type=image]").filter(t.options.filter);
                    r.trigger("submit.validation").trigger("validationLostFocus.validation"), r.each(function (e, t) {
                        var i = a(t), r = i.parents(".control-group").first();
                        (r.hasClass("warning") || r.hasClass("error")) && (r.removeClass("warning").addClass("error"), n++)
                    }), n ? (t.options.preventSubmit && (e.preventDefault(), e.stopImmediatePropagation()), i.addClass("error"), a.isFunction(t.options.submitError) && t.options.submitError(i, e, r.jqBootstrapValidation("collectErrors", !0))) : (i.removeClass("error"), a.isFunction(t.options.submitSuccess) && t.options.submitSuccess(i, e))
                }), this.each(function () {
                    var e = a(this), n = e.parents(".control-group").first(), s = n.find(".help-block").first(), d = e.parents("form").first(), l = [];
                    if (!s.length && t.options.autoAdd && t.options.autoAdd.helpBlocks && (s = a('<div class="help-block" />'), n.find(".controls").append(s), i.push(s[0])), t.options.sniffHtml) {
                        var v;
                        if (e.data("validationPatternPattern") && e.attr("pattern", e.data("validationPatternPattern")), void 0 !== e.attr("pattern") && (v = "Not in the expected format<!-- data-validation-pattern-message to override -->", e.data("validationPatternMessage") && (v = e.data("validationPatternMessage")), e.data("validationPatternMessage", v), e.data("validationPatternRegex", e.attr("pattern"))), void 0 !== e.attr("max") || void 0 !== e.attr("aria-valuemax")) {
                            var m = e.attr(void 0 !== e.attr("max") ? "max" : "aria-valuemax");
                            v = "Too high: Maximum of '" + m + "'<!-- data-validation-max-message to override -->", e.data("validationMaxMessage") && (v = e.data("validationMaxMessage")), e.data("validationMaxMessage", v), e.data("validationMaxMax", m)
                        }
                        if (void 0 !== e.attr("min") || void 0 !== e.attr("aria-valuemin")) {
                            var c = e.attr(void 0 !== e.attr("min") ? "min" : "aria-valuemin");
                            v = "Too low: Minimum of '" + c + "'<!-- data-validation-min-message to override -->", e.data("validationMinMessage") && (v = e.data("validationMinMessage")), e.data("validationMinMessage", v), e.data("validationMinMin", c)
                        }
                        if (void 0 !== e.attr("maxlength") && (v = "Too long: Maximum of '" + e.attr("maxlength") + "' characters<!-- data-validation-maxlength-message to override -->", e.data("validationMaxlengthMessage") && (v = e.data("validationMaxlengthMessage")), e.data("validationMaxlengthMessage", v), e.data("validationMaxlengthMaxlength", e.attr("maxlength"))), void 0 !== e.attr("minlength") && (v = "Too short: Minimum of '" + e.attr("minlength") + "' characters<!-- data-validation-minlength-message to override -->", e.data("validationMinlengthMessage") && (v = e.data("validationMinlengthMessage")), e.data("validationMinlengthMessage", v), e.data("validationMinlengthMinlength", e.attr("minlength"))), (void 0 !== e.attr("required") || void 0 !== e.attr("aria-required")) && (v = t.builtInValidators.required.message, e.data("validationRequiredMessage") && (v = e.data("validationRequiredMessage")), e.data("validationRequiredMessage", v)), void 0 !== e.attr("type") && "number" === e.attr("type").toLowerCase()) {
                            v = t.validatorTypes.number.message, e.data("validationNumberMessage") && (v = e.data("validationNumberMessage")), e.data("validationNumberMessage", v);
                            var u = t.validatorTypes.number.step;
                            e.data("validationNumberStep") && (u = e.data("validationNumberStep")), e.data("validationNumberStep", u);
                            var g = t.validatorTypes.number.decimal;
                            e.data("validationNumberDecimal") && (g = e.data("validationNumberDecimal")), e.data("validationNumberDecimal", g)
                        }
                        void 0 !== e.attr("type") && "email" === e.attr("type").toLowerCase() && (v = "Not a valid email address<!-- data-validation-email-message to override -->", e.data("validationEmailMessage") && (v = e.data("validationEmailMessage")), e.data("validationEmailMessage", v)), void 0 !== e.attr("minchecked") && (v = "Not enough options checked; Minimum of '" + e.attr("minchecked") + "' required<!-- data-validation-minchecked-message to override -->", e.data("validationMincheckedMessage") && (v = e.data("validationMincheckedMessage")), e.data("validationMincheckedMessage", v), e.data("validationMincheckedMinchecked", e.attr("minchecked"))), void 0 !== e.attr("maxchecked") && (v = "Too many options checked; Maximum of '" + e.attr("maxchecked") + "' required<!-- data-validation-maxchecked-message to override -->", e.data("validationMaxcheckedMessage") && (v = e.data("validationMaxcheckedMessage")), e.data("validationMaxcheckedMessage", v), e.data("validationMaxcheckedMaxchecked", e.attr("maxchecked")))
                    }
                    void 0 !== e.data("validation") && (l = e.data("validation").split(",")), a.each(e.data(), function (a) {
                        var e = a.replace(/([A-Z])/g, ",$1").split(",");
                        "validation" === e[0] && e[1] && l.push(e[1])
                    });
                    var h = l, p = [], f = function (a, e) {
                        l[a] = r(e)
                    }, M = function (i, n) {
                        if (void 0 !== e.data("validation" + n + "Shortcut"))a.each(e.data("validation" + n + "Shortcut").split(","), function (a, e) {
                            p.push(e)
                        }); else if (t.builtInValidators[n.toLowerCase()]) {
                            var o = t.builtInValidators[n.toLowerCase()];
                            "shortcut" === o.type.toLowerCase() && a.each(o.shortcut.split(","), function (a, e) {
                                e = r(e), p.push(e), l.push(e)
                            })
                        }
                    };
                    do a.each(l, f), l = a.unique(l), p = [], a.each(h, M), h = p; while (h.length > 0);
                    var b = {};
                    a.each(l, function (i, n) {
                        var o = e.data("validation" + n + "Message"), s = !!o, d = !1;
                        if (o || (o = "'" + n + "' validation failed <!-- Add attribute 'data-validation-" + n.toLowerCase() + "-message' to input to change this message -->"), a.each(t.validatorTypes, function (t, i) {
                                if (void 0 === b[t] && (b[t] = []), !d && void 0 !== e.data("validation" + n + r(i.name))) {
                                    var l = i.init(e, n);
                                    s && (l.message = o), b[t].push(a.extend(!0, {
                                        name: r(i.name),
                                        message: o
                                    }, l)), d = !0
                                }
                            }), !d && t.builtInValidators[n.toLowerCase()]) {
                            var l = a.extend(!0, {}, t.builtInValidators[n.toLowerCase()]);
                            s && (l.message = o);
                            var v = l.type.toLowerCase();
                            "shortcut" === v ? d = !0 : a.each(t.validatorTypes, function (t, i) {
                                void 0 === b[t] && (b[t] = []), d || v !== t.toLowerCase() || (e.data("validation" + n + r(i.name), l[i.name.toLowerCase()]), b[v].push(a.extend(l, i.init(e, n))), d = !0)
                            })
                        }
                        d || a.error("Cannot find validation info for '" + n + "'")
                    }), s.data("original-contents", s.data("original-contents") ? s.data("original-contents") : s.html()), s.data("original-role", s.data("original-role") ? s.data("original-role") : s.attr("role")), n.data("original-classes", n.data("original-clases") ? n.data("original-classes") : n.attr("class")), e.data("original-aria-invalid", e.data("original-aria-invalid") ? e.data("original-aria-invalid") : e.attr("aria-invalid")), e.bind("validation.validation", function (i, n) {
                        var r = o(e), s = [];
                        return a.each(b, function (i, o) {
                            (r || r.length || n && n.includeEmpty || t.validatorTypes[i].includeEmpty || t.validatorTypes[i].blockSubmit && n && n.submitting) && a.each(o, function (a, n) {
                                t.validatorTypes[i].validate(e, r, n) && s.push(n.message)
                            })
                        }), s
                    }), e.bind("getValidators.validation", function () {
                        return b
                    }), e.bind("submit.validation", function () {
                        return e.triggerHandler("change.validation", {submitting: !0})
                    }), e.bind((t.options.bindEvents.length > 0 ? t.options.bindEvents : ["keyup", "focus", "blur", "click", "keydown", "keypress", "change"]).concat(["revalidate"]).join(".validation ") + ".validation", function (i, r) {
                        var l = o(e), v = [];
                        r && r.submitting ? n.data("jqbvIsSubmitting", !0) : "revalidate" !== i.type && n.data("jqbvIsSubmitting", !1);
                        var m = !!n.data("jqbvIsSubmitting");
                        n.find("input,textarea,select").each(function (t, i) {
                            var n = v.length;
                            if (a.each(a(i).triggerHandler("validation.validation", r), function (a, e) {
                                    v.push(e)
                                }), v.length > n)a(i).attr("aria-invalid", "true"); else {
                                var o = e.data("original-aria-invalid");
                                a(i).attr("aria-invalid", void 0 !== o ? o : !1)
                            }
                        }), d.find("input,select,textarea").not(e).not('[name="' + e.attr("name") + '"]').trigger("validationLostFocus.validation"), v = a.unique(v.sort()), v.length ? (n.removeClass("success error warning").addClass(m ? "error" : "warning"), s.html(t.options.semanticallyStrict && 1 === v.length ? v[0] + (t.options.prependExistingHelpBlock ? s.data("original-contents") : "") : '<ul role="alert"><li>' + v.join("</li><li>") + "</li></ul>" + (t.options.prependExistingHelpBlock ? s.data("original-contents") : ""))) : (n.removeClass("warning error success"), l.length > 0 && n.addClass("success"), s.html(s.data("original-contents"))), "blur" === i.type && n.removeClass("success")
                    }), e.bind("validationLostFocus.validation", function () {
                        n.removeClass("success")
                    })
                })
            }, destroy: function () {
                return this.each(function () {
                    var e = a(this), t = e.parents(".control-group").first(), n = t.find(".help-block").first();
                    e.unbind(".validation"), n.html(n.data("original-contents")), t.attr("class", t.data("original-classes")), e.attr("aria-invalid", e.data("original-aria-invalid")), n.attr("role", e.data("original-role")), a.inArray(n[0], i) > -1 && n.remove()
                })
            }, collectErrors: function () {
                var e = {};
                return this.each(function (t, i) {
                    var n = a(i), r = n.attr("name"), o = n.triggerHandler("validation.validation", {includeEmpty: !0});
                    e[r] = a.extend(!0, o, e[r])
                }), a.each(e, function (a, t) {
                    0 === t.length && delete e[a]
                }), e
            }, hasErrors: function () {
                var e = [];
                return this.find("input,select,textarea").add(this).each(function (t, i) {
                    e = e.concat(a(i).triggerHandler("getValidators.validation") ? a(i).triggerHandler("validation.validation", {submitting: !0}) : [])
                }), e.length > 0
            }, override: function (e) {
                n = a.extend(!0, n, e)
            }
        },
        validatorTypes: {
            callback: {
                name: "callback", init: function (a, e) {
                    var t = {
                        validatorName: e,
                        callback: a.data("validation" + e + "Callback"),
                        lastValue: a.val(),
                        lastValid: !0,
                        lastFinished: !0
                    }, i = "Not valid";
                    return a.data("validation" + e + "Message") && (i = a.data("validation" + e + "Message")), t.message = i, t
                }, validate: function (a, e, i) {
                    if (i.lastValue === e && i.lastFinished)return !i.lastValid;
                    if (i.lastFinished === !0) {
                        i.lastValue = e, i.lastValid = !0, i.lastFinished = !1;
                        var n = i, r = a;
                        t(i.callback, window, a, e, function (e) {
                            n.lastValue === e.value && (n.lastValid = e.valid, e.message && (n.message = e.message), n.lastFinished = !0, r.data("validation" + n.validatorName + "Message", n.message), setTimeout(function () {
                                r.trigger(!a.is(":focus") && a.parents("form").first().data("jqbvIsSubmitting") ? "blur.validation" : "revalidate.validation")
                            }, 1))
                        })
                    }
                    return !1
                }
            }, ajax: {
                name: "ajax", init: function (a, e) {
                    return {
                        validatorName: e,
                        url: a.data("validation" + e + "Ajax"),
                        lastValue: a.val(),
                        lastValid: !0,
                        lastFinished: !0
                    }
                }, validate: function (e, t, i) {
                    return "" + i.lastValue == "" + t && i.lastFinished === !0 ? i.lastValid === !1 : (i.lastFinished === !0 && (i.lastValue = t, i.lastValid = !0, i.lastFinished = !1, a.ajax({
                        url: i.url,
                        data: "value=" + encodeURIComponent(t) + "&field=" + e.attr("name"),
                        dataType: "json",
                        success: function (a) {
                            "" + i.lastValue == "" + a.value && (i.lastValid = !!a.valid, a.message && (i.message = a.message), i.lastFinished = !0, e.data("validation" + i.validatorName + "Message", i.message), setTimeout(function () {
                                e.trigger("revalidate.validation")
                            }, 1))
                        },
                        failure: function () {
                            i.lastValid = !0, i.message = "ajax call failed", i.lastFinished = !0, e.data("validation" + i.validatorName + "Message", i.message), setTimeout(function () {
                                e.trigger("revalidate.validation")
                            }, 1)
                        }
                    })), !1)
                }
            }, regex: {
                name: "regex", init: function (t, i) {
                    var n = {}, r = t.data("validation" + i + "Regex");
                    n.regex = e(r), void 0 === r && a.error("Can't find regex for '" + i + "' validator on '" + t.attr("name") + "'");
                    var o = "Not in the expected format";
                    return t.data("validation" + i + "Message") && (o = t.data("validation" + i + "Message")), n.message = o, n.originalName = i, n
                }, validate: function (a, e, t) {
                    return !t.regex.test(e) && !t.negative || t.regex.test(e) && t.negative
                }
            }, email: {
                name: "email", init: function (a, t) {
                    var i = {};
                    i.regex = e("[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}");
                    var n = "Not a valid email address";
                    return a.data("validation" + t + "Message") && (n = a.data("validation" + t + "Message")), i.message = n, i.originalName = t, i
                }, validate: function (a, e, t) {
                    return !t.regex.test(e) && !t.negative || t.regex.test(e) && t.negative
                }
            }, required: {
                name: "required", init: function (a, e) {
                    var t = "This is required";
                    return a.data("validation" + e + "Message") && (t = a.data("validation" + e + "Message")), {message: t}
                }, validate: function (a, e, t) {
                    return !(0 !== e.length || t.negative) || !!(e.length > 0 && t.negative)
                }, blockSubmit: !0
            }, match: {
                name: "match", init: function (e, t) {
                    var i = e.data("validation" + t + "Match"), n = e.parents("form").first(), r = n.find('[name="' + i + '"]').first();
                    r.bind("validation.validation", function () {
                        e.trigger("revalidate.validation", {submitting: !0})
                    });
                    var o = {};
                    o.element = r, 0 === r.length && a.error("Can't find field '" + i + "' to match '" + e.attr("name") + "' against in '" + t + "' validator");
                    var s = "Must match", d = null;
                    return (d = n.find('label[for="' + i + '"]')).length ? s += " '" + d.text() + "'" : (d = r.parents(".control-group").first().find("label")).length && (s += " '" + d.first().text() + "'"), e.data("validation" + t + "Message") && (s = e.data("validation" + t + "Message")), o.message = s, o
                }, validate: function (a, e, t) {
                    return e !== t.element.val() && !t.negative || e === t.element.val() && t.negative
                }, blockSubmit: !0, includeEmpty: !0
            }, max: {
                name: "max", init: function (a, e) {
                    var t = {};
                    return t.max = a.data("validation" + e + "Max"), t.message = "Too high: Maximum of '" + t.max + "'", a.data("validation" + e + "Message") && (t.message = a.data("validation" + e + "Message")), t
                }, validate: function (a, e, t) {
                    return parseFloat(e, 10) > parseFloat(t.max, 10) && !t.negative || parseFloat(e, 10) <= parseFloat(t.max, 10) && t.negative
                }
            }, min: {
                name: "min", init: function (a, e) {
                    var t = {};
                    return t.min = a.data("validation" + e + "Min"), t.message = "Too low: Minimum of '" + t.min + "'", a.data("validation" + e + "Message") && (t.message = a.data("validation" + e + "Message")), t
                }, validate: function (a, e, t) {
                    return parseFloat(e) < parseFloat(t.min) && !t.negative || parseFloat(e) >= parseFloat(t.min) && t.negative
                }
            }, maxlength: {
                name: "maxlength", init: function (a, e) {
                    var t = {};
                    return t.maxlength = a.data("validation" + e + "Maxlength"), t.message = "Too long: Maximum of '" + t.maxlength + "' characters", a.data("validation" + e + "Message") && (t.message = a.data("validation" + e + "Message")), t
                }, validate: function (a, e, t) {
                    return e.length > t.maxlength && !t.negative || e.length <= t.maxlength && t.negative
                }
            }, minlength: {
                name: "minlength", init: function (a, e) {
                    var t = {};
                    return t.minlength = a.data("validation" + e + "Minlength"), t.message = "Too short: Minimum of '" + t.minlength + "' characters", a.data("validation" + e + "Message") && (t.message = a.data("validation" + e + "Message")), t
                }, validate: function (a, e, t) {
                    return e.length < t.minlength && !t.negative || e.length >= t.minlength && t.negative
                }
            }, maxchecked: {
                name: "maxchecked", init: function (a, e) {
                    var t = {}, i = a.parents("form").first().find('[name="' + a.attr("name") + '"]');
                    i.bind("change.validation click.validation", function () {
                        a.trigger("revalidate.validation", {includeEmpty: !0})
                    }), t.elements = i, t.maxchecked = a.data("validation" + e + "Maxchecked");
                    var n = "Too many: Max '" + t.maxchecked + "' checked";
                    return a.data("validation" + e + "Message") && (n = a.data("validation" + e + "Message")), t.message = n, t
                }, validate: function (a, e, t) {
                    return t.elements.filter(":checked").length > t.maxchecked && !t.negative || t.elements.filter(":checked").length <= t.maxchecked && t.negative
                }, blockSubmit: !0
            }, minchecked: {
                name: "minchecked", init: function (a, e) {
                    var t = {}, i = a.parents("form").first().find('[name="' + a.attr("name") + '"]');
                    i.bind("change.validation click.validation", function () {
                        a.trigger("revalidate.validation", {includeEmpty: !0})
                    }), t.elements = i, t.minchecked = a.data("validation" + e + "Minchecked");
                    var n = "Too few: Min '" + t.minchecked + "' checked";
                    return a.data("validation" + e + "Message") && (n = a.data("validation" + e + "Message")), t.message = n, t
                }, validate: function (a, e, t) {
                    return t.elements.filter(":checked").length < t.minchecked && !t.negative || t.elements.filter(":checked").length >= t.minchecked && t.negative
                }, blockSubmit: !0, includeEmpty: !0
            }, number: {
                name: "number", init: function (a, t) {
                    var i = {};
                    i.step = 1, a.attr("step") && (i.step = a.attr("step")), a.data("validation" + t + "Step") && (i.step = a.data("validation" + t + "Step")), i.decimal = ".", a.data("validation" + t + "Decimal") && (i.decimal = a.data("validation" + t + "Decimal")), i.thousands = "", a.data("validation" + t + "Thousands") && (i.thousands = a.data("validation" + t + "Thousands")), i.regex = e("([+-]?\\d+(\\" + i.decimal + "\\d+)?)?"), i.message = "Must be a number";
                    var n = a.data("validation" + t + "Message");
                    return n && (i.message = n), i
                }, validate: function (a, e, t) {
                    for (var i = e.replace(t.decimal, ".").replace(t.thousands, ""), n = parseFloat(i), r = parseFloat(t.step); r % 1 !== 0;)r *= 10, n *= 10;
                    var o = t.regex.test(e), s = parseFloat(n) % parseFloat(r) === 0, d = !isNaN(parseFloat(i)) && isFinite(i), l = !(o && s && d);
                    return l
                }, message: "Must be a number"
            }
        },
        builtInValidators: {
            email: {name: "Email", type: "email"},
            passwordagain: {
                name: "Passwordagain",
                type: "match",
                match: "password",
                message: "Does not match the given password<!-- data-validator-paswordagain-message to override -->"
            },
            positive: {name: "Positive", type: "shortcut", shortcut: "number,positivenumber"},
            negative: {name: "Negative", type: "shortcut", shortcut: "number,negativenumber"},
            integer: {
                name: "Integer",
                type: "regex",
                regex: "[+-]?\\d+",
                message: "No decimal places allowed<!-- data-validator-integer-message to override -->"
            },
            positivenumber: {
                name: "Positivenumber",
                type: "min",
                min: 0,
                message: "Must be a positive number<!-- data-validator-positivenumber-message to override -->"
            },
            negativenumber: {
                name: "Negativenumber",
                type: "max",
                max: 0,
                message: "Must be a negative number<!-- data-validator-negativenumber-message to override -->"
            },
            required: {
                name: "Required",
                type: "required",
                message: "This is required<!-- data-validator-required-message to override -->"
            },
            checkone: {
                name: "Checkone",
                type: "minchecked",
                minchecked: 1,
                message: "Check at least one option<!-- data-validation-checkone-message to override -->"
            },
            number: {name: "Number", type: "number", decimal: ".", step: "1"},
            pattern: {name: "Pattern", type: "regex", message: "Not in expected format"}
        }
    }, r = function (a) {
        return a.toLowerCase().replace(/(^|\s)([a-z])/g, function (a, e, t) {
            return e + t.toUpperCase()
        })
    }, o = function (e) {
        var t = e.val(), i = e.attr("type"), n = null, r = !!(n = e.parents("form").first()) || !!(n = e.parents(".control-group").first());
        return "checkbox" === i && (t = e.is(":checked") ? t : "", r && (t = n.find("input[type='checkbox'][name='" + e.attr("name") + "']:checked").map(function (e, t) {
            return a(t).val()
        }).toArray().join(","))), "radio" === i && (t = a('input[name="' + e.attr("name") + '"]:checked').length > 0 ? t : "", r && (t = n.find("input[type='radio'][name='" + e.attr("name") + "']:checked").map(function (e, t) {
            return a(t).val()
        }).toArray().join(","))), t
    };
    a.fn.jqBootstrapValidation = function (e) {
        return n.methods[e] ? n.methods[e].apply(this, Array.prototype.slice.call(arguments, 1)) : "object" != typeof e && e ? (a.error("Method " + e + " does not exist on jQuery.jqBootstrapValidation"), null) : n.methods.init.apply(this, arguments)
    }, a.jqBootstrapValidation = function () {
        a(":input").not("[type=image],[type=submit]").jqBootstrapValidation.apply(this, arguments)
    }
}(jQuery);